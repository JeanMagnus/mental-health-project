# Conte√∫do COMPLETO para o arquivo pages/Classificacao.py

import streamlit as st
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from imblearn.over_sampling import SMOTE


# --- L√ìGICA EM SEGUNDO PLANO ---
# Fun√ß√£o para treinar o modelo e deix√°-lo pronto para uso.
# O cache garante que isso rode apenas uma vez por sess√£o.
@st.cache_resource
def get_trained_model(df):
    """
    Prepara os dados, treina o modelo com SMOTE e o retorna pronto para previs√µes.
    """
    st.write("Cache miss: Carregando e treinando o modelo pela primeira vez...")

    # 1. Prepara√ß√£o dos dados
    features = ['Age', 'family_history', 'work_interfere', 'benefits', 'Gender_clean']
    target = 'treatment'
    df_ml = df.dropna(subset=features + [target]).copy()
    df_ml[target] = df_ml[target].map({'Yes': 1, 'No': 0})
    X = df_ml[features]
    y = df_ml[target]
    X_encoded = pd.get_dummies(X, drop_first=True)

    # 2. Divis√£o e Balanceamento (fluxo correto)
    X_train, _, y_train, _ = train_test_split(
        X_encoded, y, test_size=0.2, stratify=y, random_state=42
    )
    smote = SMOTE(random_state=42)
    X_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train)

    # 3. Treinamento do Modelo
    model = RandomForestClassifier(random_state=42)
    model.fit(X_train_resampled, y_train_resampled)
    
    # Retorna o modelo treinado e as colunas necess√°rias para o formul√°rio
    return model, X_encoded.columns

# --- INTERFACE DO FORMUL√ÅRIO ---
st.title("üß† Formul√°rio de Previs√£o")
st.markdown("Preencha os dados abaixo para que o modelo de Machine Learning fa√ßa uma previs√£o em tempo real.")

# Verifica se os dados principais foram carregados na Home
if 'df' in st.session_state:
    df_principal = st.session_state['df']
    
    # Carrega o modelo treinado (do cache)
    with st.spinner('Carregando o modelo preditivo...'):
        modelo, colunas_modelo = get_trained_model(df_principal)
    
    # Cria o formul√°rio
    with st.form("prediction_form"):
        st.header("Por favor, forne√ßa suas informa√ß√µes")
        
        # Inputs do usu√°rio
        age_input = st.slider("Idade", min_value=18, max_value=100, value=30, step=1)
        family_history_input = st.radio("Voc√™ tem hist√≥rico familiar de doen√ßa mental?", ("No", "Yes"), index=0, horizontal=True)
        work_interfere_input = st.selectbox("Voc√™ sente que sua condi√ß√£o de sa√∫de mental interfere no seu trabalho?", ("Never", "Sometimes", "Often", "Rarely"))
        benefits_input = st.radio("Sua empresa oferece benef√≠cios de sa√∫de mental?", ("No", "Don't know", "Yes"), index=1, horizontal=True)
        gender_input = st.radio("G√™nero", ("Female", "Male", "Other"), index=0, horizontal=True)

        # Bot√£o de envio
        submit_button = st.form_submit_button("Fazer Previs√£o")

    # L√≥gica a ser executada AP√ìS o envio do formul√°rio
    if submit_button:
        # 1. Coleta e formata os dados do formul√°rio
        dados_usuario = {
            'Age': [age_input],
            'family_history': [family_history_input],
            'work_interfere': [work_interfere_input],
            'benefits': [benefits_input],
            'Gender_clean': [gender_input]
        }
        usuario_df = pd.DataFrame(dados_usuario)

        # 2. Aplica o pr√©-processamento
        usuario_encoded = pd.get_dummies(usuario_df, drop_first=True)
        usuario_final = usuario_encoded.reindex(columns=colunas_modelo, fill_value=0)

        # 3. Faz a previs√£o de probabilidade
        probabilidade = modelo.predict_proba(usuario_final)
        prob_sim = probabilidade[0][1]

        # 4. Exibe o resultado
        st.header("Resultado da An√°lise")
        if prob_sim > 0.6:
            st.success(
                f"O modelo prev√™ uma probabilidade de **{prob_sim:.0%}** de que uma pessoa com este perfil "
                f"busque tratamento para sa√∫de mental.",
                icon="‚úÖ"
            )
            st.balloons()
        else:
            st.info(
                f"O modelo prev√™ uma probabilidade de **{prob_sim:.0%}** de que uma pessoa com este perfil "
                f"busque tratamento para sa√∫de mental.",
                icon="üí°"
            )
        
        st.warning(
            "**Observa√ß√£o:** Este √© um resultado gerado por um modelo estat√≠stico e n√£o substitui "
            "uma avalia√ß√£o profissional de sa√∫de.",
            icon="‚ö†Ô∏è"
        )
else:
    st.error("Os dados n√£o foram carregados. Por favor, v√° para a p√°gina principal primeiro para carregar o arquivo.")